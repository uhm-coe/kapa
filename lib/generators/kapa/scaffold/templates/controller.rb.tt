<% if namespaced? -%>
require_dependency "<%= namespaced_path %>/application_controller"

<% end -%>
<% module_namespacing do -%>
class <%= controller_class_name %>Controller < Kapa::KapaController

  # GET <%= route_url %>
  def index
    @filter = filter
    @modal = true if @filter.name.blank?
    @<%= plural_name %> = <%= orm_class.new(class_name).name %>.search(:filter => @filter).paginate(:page => params[:page], :per_page => @filter.per_page)
  end

  # GET <%= route_url %>/1
  def show
    @<%= singular_name %> = <%= orm_class.new(class_name).name %>.find(params[:id])
    @<%= singular_name %>_ext = @<%= singular_name %>.ext
  end

  # GET <%= route_url %>/new
  def new
    @filter = filter
    @<%= singular_name %> = <%= orm_class.build(class_name) %>
  end

  # POST <%= route_url %>
  def create
    @<%= singular_name %> = <%= orm_class.build(class_name) %>
    @<%= singular_name %>.attributes= <%= singular_name %>_params
    @<%= singular_name %>.update_serialized_attributes!(:_ext, <%= singular_name %>_ext_params) if params[:<%= singular_name %>_ext].present?

    if @<%= singular_name %>.save
      flash[:success] = "<%= singular_name.humanize %> was successfully created."
      redirect_to <%= singular_table_name %>_path(:id => @<%= singular_name %>)
    else
      flash[:danger] = error_message_for(@property)
      redirect_to new_<%= singular_table_name %>_path and return false
    end
  end

  # PATCH/PUT <%= route_url %>/1
  def update
    @<%= singular_name %> = <%= orm_class.new(class_name).name %>.find(params[:id])
    @<%= singular_name %>.attributes= <%= singular_name %>_params
    @<%= singular_name %>.update_serialized_attributes!(:_ext, <%= singular_name %>_ext_params) if params[:<%= singular_name %>_ext].present?

    if @<%= singular_name %>
      flash[:success] = "<%= singular_name.humanize %> was successfully updated."
    else
      flash[:danger] = error_message_for(@<%= singular_name %>)
    end
    redirect_to <%= singular_table_name %>_path(:id => @<%= singular_name %>)
  end

  # DELETE <%= route_url %>/1
  def destroy
    @<%= singular_name %> = <%= orm_class.new(class_name).name %>.find(params[:id])

    if @<%= singular_name %>.destroy
      flash[:success] = "<%= singular_name.humanize %> was successfully deleted."
    else
      flash[:danger] = error_message_for(@<%= singular_name %>)
    end
    redirect_to params[:return_path] || session[:return_path]
  end

  private
  # Only allow a trusted parameter "white list" through.
  def <%= "#{singular_name}_params" %>
    <%- if attributes_names.empty? -%>
    params.fetch(:<%= singular_name %>, {})
    <%- else -%>
    params.require(:<%= singular_name %>).permit(<%= attributes_names.map { |name| ":#{name}" }.join(', ') %>)
    <%- end -%>
  end
end
<% end -%>